// ========================================
// xBrush Video Creation Application
// ========================================

/**
 * Main application class for video creation workflow
 */
class VideoCreationApp {
    constructor() {
        this.dataService = new DataService();
        this.uiController = new UIController();
        this.stepManager = new StepManager(this.dataService, this.uiController);
        this.domCache = new DOMCache();
        
        this.init();
    }

    /**
     * Initialize the application
     */
    init() {
        try {
            this.setupEventListeners();
            this.stepManager.updateProgressLine();
            this.loadModelImages();
            this.setupFormValidation();
            
            showToast('Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§.', 'success');
        } catch (error) {
            handleError(error, 'Application initialization');
        }
    }

    /**
     * Set up global event listeners
     */
    setupEventListeners() {
        try {
            // Step navigation click events
            const steps = this.domCache.get('progress-steps', () => 
                safeGetElements('.step')
            );
            
            steps.forEach(step => {
                safeAddEventListener(step, 'click', (e) => {
                    const stepNumber = parseInt(step.getAttribute('data-step'));
                    this.handleStepClick(stepNumber);
                });
            });

            // Window resize handler
            safeAddEventListener(window, 'resize', 
                throttle(() => this.handleResize(), 300)
            );

        } catch (error) {
            handleError(error, 'Event listener setup');
        }
    }

    /**
     * Handle step navigation clicks
     */
    handleStepClick(stepNumber) {
        try {
            const currentStep = this.stepManager.getCurrentStep();
            
            // Prevent going back after image generation (step 6)
            if (currentStep >= STEPS.VIDEO_CREATION && stepNumber < currentStep) {
                showToast('‚ö†Ô∏è Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïù¥ÌõÑÏóêÎäî Ïù¥Ï†Ñ Îã®Í≥ÑÎ°ú ÎèåÏïÑÍ∞à Ïàò ÏóÜÏäµÎãàÎã§.', 'warning');
                return;
            }
            
            this.stepManager.goToStep(stepNumber);
        } catch (error) {
            handleError(error, 'Step navigation');
        }
    }

    /**
     * Set up form validation for input fields
     */
    setupFormValidation() {
        try {
            const inputs = ['productName', 'targetAudience', 'coreMessage', 'tone'];
            
            inputs.forEach(inputId => {
                const element = safeGetElement(inputId);
                if (element) {
                    const debouncedHandler = debounce((e) => {
                        const value = sanitizeInput(e.target.value);
                        this.dataService.updateField(inputId, value);
                        this.stepManager.checkNextButton();
                    }, 300);

                    safeAddEventListener(element, 'input', debouncedHandler);
                    safeAddEventListener(element, 'change', debouncedHandler);
                }
            });
        } catch (error) {
            handleError(error, 'Form validation setup');
        }
    }

    /**
     * Load model images from configuration and database
     */
    async loadModelImages() {
        try {
            // Load static model images
            const modelElements = this.domCache.get('model-images', () => 
                safeGetElements('.model-image')
            );
            
            modelElements.forEach(element => {
                const modelId = element.getAttribute('data-model');
                if (MODEL_IMAGES[modelId] && isValidUrl(MODEL_IMAGES[modelId])) {
                    element.style.backgroundImage = `url('${MODEL_IMAGES[modelId]}')`;
                } else {
                    console.warn(`Invalid or missing image for model: ${modelId}`);
                }
            });
            
            // Load registered models from database
            await this.loadRegisteredModels();
            
        } catch (error) {
            handleError(error, 'Model image loading');
        }
    }

    /**
     * Load registered models from database
     */
    async loadRegisteredModels() {
        try {
            // Initialize database
            await xbrushDB.init();
            
            // Get approved models
            const registeredModels = await xbrushDB.getApprovedModels();
            
            if (registeredModels.length > 0) {
                this.renderRegisteredModels(registeredModels);
            }
            
        } catch (error) {
            console.error('Error loading registered models:', error);
            // Don't show error to user as this is optional functionality
        }
    }

    /**
     * Render registered models in Step 1
     */
    renderRegisteredModels(models) {
        const step1 = document.getElementById('step1');
        if (!step1) return;
        
        // Find the virtual models section
        const virtualSection = step1.querySelector('.card-grid').parentElement;
        if (!virtualSection) return;
        
        // Create registered models section
        const registeredSection = document.createElement('section');
        registeredSection.className = 'registered-models-section';
        registeredSection.innerHTML = `
            <header class="flex items-center mb-2">
                <h2 class="subheading mb-0 mr-3">Îì±Î°ùÎêú AI Î™®Îç∏</h2>
                <span class="badge badge-new">NEW</span>
            </header>
            <p class="description mb-2">Ïª§ÎÆ§ÎãàÌã∞ÏóêÏÑú Îì±Î°ùÌïú Ïã§Ï†ú Î™®Îç∏Îì§ÏûÖÎãàÎã§.</p>
            <div class="card-grid" id="registeredModelsGrid"></div>
        `;
        
        const grid = registeredSection.querySelector('#registeredModelsGrid');
        
        models.forEach(model => {
            const card = document.createElement('div');
            card.className = 'card';
            card.setAttribute('data-model', model.id);
            card.setAttribute('data-tier', model.tier);
            card.onclick = () => selectModel(card, model.id, model.tier);
            
            // Create model image element
            const modelImage = document.createElement('div');
            modelImage.className = 'model-image';
            modelImage.style.backgroundImage = `url('${model.profileImage}')`;
            
            // Add tier badge
            const badge = document.createElement('div');
            badge.className = `badge ${model.tier === 'premium' ? 'premium-badge' : ''}`;
            badge.textContent = model.tier === 'premium' ? '100üíé' : 'FREE';
            modelImage.appendChild(badge);
            
            // Create card content
            card.innerHTML = `
                <h3>${model.name}</h3>
                <p>${model.description}</p>
            `;
            
            // Prepend the model image
            card.insertBefore(modelImage, card.firstChild);
            
            grid.appendChild(card);
        });
        
        // Insert after virtual models section
        virtualSection.parentElement.insertBefore(registeredSection, virtualSection.nextSibling);
        
        // Update badge style if not already in CSS
        if (!document.querySelector('#registered-models-styles')) {
            const style = document.createElement('style');
            style.id = 'registered-models-styles';
            style.textContent = `
                .registered-models-section {
                    margin-top: 40px;
                }
                
                .badge-new {
                    background: linear-gradient(135deg, #ff6b6b, #ee5a24);
                    color: white;
                    padding: 4px 8px;
                    border-radius: 12px;
                    font-size: 0.75rem;
                    font-weight: 600;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }
                
                .flex {
                    display: flex;
                }
                
                .items-center {
                    align-items: center;
                }
                
                .mr-3 {
                    margin-right: 12px;
                }
            `;
            document.head.appendChild(style);
        }
    }

    /**
     * Handle window resize events
     */
    handleResize() {
        try {
            // Clear DOM cache on resize to ensure responsive behavior
            this.domCache.clear();
            this.stepManager.updateProgressLine();
        } catch (error) {
            handleError(error, 'Window resize handling');
        }
    }
}

/**
 * Data service class for managing application state
 */
class DataService {
    constructor() {
        this.selectedData = {
            model: null,
            modelTier: null,
            productName: '',
            targetAudience: '',
            coreMessage: '',
            tone: '',
            format: null,
            duration: null,
            style: null,
            scenarioApproved: false,
            selectedImages: {
                cut1: null,
                cut2: null,
                cut3: null
            },
            videoCreated: false,
            hasChosenImagePreview: false,
            skipImagePreview: false,
            selectedVideoCuts: {}
        };
    }

    /**
     * Update a field in the selected data
     */
    updateField(field, value) {
        try {
            if (this.selectedData.hasOwnProperty(field)) {
                this.selectedData[field] = value;
            } else {
                console.warn(`Unknown field: ${field}`);
            }
        } catch (error) {
            handleError(error, 'Data field update');
        }
    }

    /**
     * Get the current data
     */
    getData() {
        return { ...this.selectedData }; // Return a copy
    }

    /**
     * Check if a step is completed
     */
    isStepCompleted(step) {
        try {
            switch(step) {
                case STEPS.MODEL_SELECTION: 
                    return this.selectedData.model !== null;
                case STEPS.BASIC_INFO: 
                    return this.selectedData.productName !== '' && 
                           this.selectedData.targetAudience !== '' && 
                           this.selectedData.coreMessage !== '' && 
                           this.selectedData.tone !== '';
                case STEPS.FORMAT_SELECTION: 
                    return this.selectedData.format !== null && 
                           this.selectedData.duration !== null;
                case STEPS.STYLE_SELECTION: 
                    return this.selectedData.style !== null;
                case STEPS.SCENARIO_REVIEW: 
                    return this.selectedData.scenarioApproved === true;
                case STEPS.VIDEO_CREATION: 
                    return this.selectedData.videoCreated === true;
                case STEPS.RESULTS: 
                    return true;
                default: 
                    return false;
            }
        } catch (error) {
            handleError(error, 'Step completion check');
            return false;
        }
    }

    /**
     * Reset all data to initial state
     */
    reset() {
        try {
            this.selectedData = {
                model: null,
                modelTier: null,
                productName: '',
                targetAudience: '',
                coreMessage: '',
                tone: '',
                format: null,
                duration: null,
                style: null,
                scenarioApproved: false,
                selectedImages: {
                    cut1: null,
                    cut2: null,
                    cut3: null
                },
                videoCreated: false,
                hasChosenImagePreview: false,
                skipImagePreview: false,
                selectedVideoCuts: {}
            };
        } catch (error) {
            handleError(error, 'Data reset');
        }
    }

    /**
     * Update image selection for a specific cut
     */
    updateImageSelection(cutId, value) {
        try {
            if (this.selectedData.selectedImages.hasOwnProperty(cutId)) {
                this.selectedData.selectedImages[cutId] = value;
                console.log(`Updated image selection for ${cutId}:`, value);
            } else {
                console.warn(`Unknown cut ID: ${cutId}`);
            }
        } catch (error) {
            handleError(error, 'Image selection update');
        }
    }
}

/**
 * UI Controller class for DOM manipulation
 */
class UIController {
    constructor() {
        this.domCache = new DOMCache();
    }

    /**
     * Safely update element content
     */
    updateElement(elementId, content, isHTML = false) {
        try {
            const element = safeGetElement(elementId);
            safeUpdateElement(element, content, isHTML);
        } catch (error) {
            handleError(error, 'Element update');
        }
    }

    /**
     * Show or hide an element
     */
    toggleElement(elementId, show) {
        try {
            const element = safeGetElement(elementId);
            if (element) {
                element.style.display = show ? 'block' : 'none';
            }
        } catch (error) {
            handleError(error, 'Element toggle');
        }
    }

    /**
     * Add or remove CSS classes safely
     */
    toggleClass(elementId, className, add) {
        try {
            const element = safeGetElement(elementId);
            if (element) {
                if (add) {
                    element.classList.add(className);
                } else {
                    element.classList.remove(className);
                }
            }
        } catch (error) {
            handleError(error, 'Class toggle');
        }
    }

    /**
     * Clear selections in a container
     */
    clearSelections(containerSelector) {
        try {
            const cards = safeGetElements(`${containerSelector} .card`);
            cards.forEach(card => {
                card.classList.remove('selected');
            });
        } catch (error) {
            handleError(error, 'Selection clearing');
        }
    }

    /**
     * Update button state
     */
    updateButtonState(buttonId, enabled) {
        try {
            const button = safeGetElement(buttonId);
            if (button) {
                button.disabled = !enabled;
                
                if (enabled) {
                    button.classList.remove('btn-disabled');
                    button.classList.add('btn-primary');
                } else {
                    button.classList.add('btn-disabled');
                    button.classList.remove('btn-primary');
                }
            }
        } catch (error) {
            handleError(error, 'Button state update');
        }
    }

    /**
     * Update progress bar
     */
    updateProgress(percentage, status = '') {
        try {
            const progressBar = safeGetElement('progressBar');
            const progressPercentage = safeGetElement('progressPercentage');
            const progressStatus = safeGetElement('progressStatus');

            if (progressBar) {
                progressBar.style.width = `${percentage}%`;
            }
            if (progressPercentage) {
                progressPercentage.textContent = `${Math.round(percentage)}%`;
            }
            if (progressStatus && status) {
                progressStatus.textContent = status;
            }
        } catch (error) {
            handleError(error, 'Progress update');
        }
    }
}

/**
 * Step Manager class for handling navigation and flow
 */
class StepManager {
    constructor(dataService, uiController) {
        this.dataService = dataService;
        this.uiController = uiController;
        this.currentStep = 1;
    }

    /**
     * Navigate to a specific step
     */
    goToStep(step) {
        try {
            // Validate step number
            if (step < 1 || step > STEPS.TOTAL) {
                console.warn(`Invalid step number: ${step}`);
                return;
            }

            // Check if previous steps are completed
            if (step > 1 && !this.dataService.isStepCompleted(step - 1)) {
                showToast('Ïù¥Ï†Ñ Îã®Í≥ÑÎ•º Î®ºÏ†Ä ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
                return;
            }

            // Deactivate current step
            this.uiController.toggleClass(`step${this.currentStep}`, 'active', false);
            this.uiController.toggleClass(`[data-step="${this.currentStep}"]`, 'active', false);

            // Activate new step
            this.currentStep = step;
            this.uiController.toggleClass(`step${this.currentStep}`, 'active', true);
            
            const stepNav = document.querySelector(`[data-step="${this.currentStep}"]`);
            if (stepNav) {
                stepNav.classList.add('active');
            }

            // Mark completed steps
            for (let i = 1; i < this.currentStep; i++) {
                const stepNav = document.querySelector(`[data-step="${i}"]`);
                if (stepNav) {
                    stepNav.classList.add('completed');
                    stepNav.classList.remove('active');
                }
            }

            // Update progress line
            this.updateProgressLine();

            // Handle step-specific actions
            this.handleStepEntry(step);

        } catch (error) {
            handleError(error, 'Step navigation');
        }
    }

    /**
     * Handle step-specific entry actions
     */
    handleStepEntry(step) {
        try {
            switch(step) {
                case STEPS.VIDEO_CREATION:
                    // Check if this is video regeneration from cut selection
                    if (window.videoRegenerationInProgress) {
                        // Don't auto-start, let startVideoRegenerationProgress handle it
                        console.log('Video regeneration in progress, skipping auto-start');
                    } else if (window.imageToVideoInProgress) {
                        // Don't auto-start, let startImageToVideoProgress handle it
                        console.log('Image-to-video generation in progress, skipping auto-start');
                    } else if (window.skipAutoVideoCreation) {
                        // Reset the flag and don't auto-start
                        window.skipAutoVideoCreation = false;
                        console.log('Skipped automatic video creation for image regeneration');
                    } else {
                        // Normal video creation flow
                        setTimeout(() => {
                            this.startAutomaticVideoCreation();
                        }, 500);
                    }
                    break;
                case STEPS.RESULTS:
                    this.updateFinalInfo();
                    
                    // Debug logging
                    console.log('Step 7 Entry - Flag states:', {
                        videoRegenerationCompleted: window.videoRegenerationCompleted,
                        advancedEditAlreadyHidden: window.advancedEditAlreadyHidden,
                        cameFromImageSelection: window.cameFromImageSelection
                    });
                    
                    // More robust flag checking
                    const shouldHideAdvancedEdit = window.videoRegenerationCompleted && 
                                                  !window.advancedEditAlreadyHidden && 
                                                  !window.cameFromImageSelection;
                    
                    console.log('Should hide Advanced Edit Mode:', shouldHideAdvancedEdit);
                    
                    if (shouldHideAdvancedEdit) {
                        this.hideAdvancedEditAfterCompletion();
                        window.advancedEditAlreadyHidden = true;
                    } else {
                        // Always ensure Advanced Edit Mode is visible for image selection workflow
                        const advancedEditSection = document.getElementById('advancedEditSection');
                        if (advancedEditSection) {
                            advancedEditSection.style.display = 'block';
                            console.log('Advanced Edit Mode kept visible');
                        }
                    }
                    break;
                case STEPS.VIDEO_CUT_SELECTION:
                    // Add navigation guard to prevent recursive loop after video regeneration
                    if (window.preventStep8Navigation || 
                        (window.videoRegenerationCompleted && Date.now() - window.videoCompletionTime < 3000)) {
                        console.log('Navigation guard: Preventing recursive entry to Step 8 after video regeneration');
                        showToast('ÏòÅÏÉÅ Ï†úÏûëÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.', 'info');
                        // Return to Step 7 instead
                        setTimeout(() => {
                            this.goToStep(7);
                        }, 500);
                        return;
                    }
                    
                    // Initialize enhanced video cuts when entering step 8
                    setTimeout(() => {
                        initializeEnhancedVideoCuts();
                    }, 300);
                    break;
            }

            // Update previous button state
            this.updatePrevButtonState();
        } catch (error) {
            handleError(error, 'Step entry handling');
        }
    }

    /**
     * Move to next step
     */
    nextStep() {
        try {
            if (this.currentStep < STEPS.TOTAL) {
                this.goToStep(this.currentStep + 1);
            }
        } catch (error) {
            handleError(error, 'Next step navigation');
        }
    }

    /**
     * Move to previous step
     */
    prevStep() {
        try {
            // Restrict going back after step 6
            if (this.currentStep >= STEPS.VIDEO_CREATION) {
                showToast('‚ö†Ô∏è Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïù¥ÌõÑÏóêÎäî Ïù¥Ï†Ñ Îã®Í≥ÑÎ°ú ÎèåÏïÑÍ∞à Ïàò ÏóÜÏäµÎãàÎã§.', 'warning');
                return;
            }

            if (this.currentStep > 1) {
                this.goToStep(this.currentStep - 1);
            }
        } catch (error) {
            handleError(error, 'Previous step navigation');
        }
    }

    /**
     * Get current step number
     */
    getCurrentStep() {
        return this.currentStep;
    }

    /**
     * Update progress line visual
     */
    updateProgressLine() {
        try {
            const progressLine = safeGetElement('progressLine');
            if (progressLine) {
                const progress = ((this.currentStep - 1) / (STEPS.TOTAL - 1)) * 100;
                progressLine.style.width = `${progress}%`;
            }
        } catch (error) {
            handleError(error, 'Progress line update');
        }
    }

    /**
     * Check and update next button state
     */
    checkNextButton() {
        try {
            const isCompleted = this.dataService.isStepCompleted(this.currentStep);
            const nextButton = safeGetElement(`step${this.currentStep}Next`);
            
            if (nextButton) {
                this.uiController.updateButtonState(`step${this.currentStep}Next`, isCompleted);
            }
        } catch (error) {
            handleError(error, 'Next button check');
        }
    }

    /**
     * Update previous button state
     */
    updatePrevButtonState() {
        try {
            const prevButtons = safeGetElements('.action-buttons .btn-outline');
            prevButtons.forEach(button => {
                if (button.textContent.includes('Ïù¥Ï†Ñ Îã®Í≥Ñ')) {
                    const shouldDisable = this.currentStep >= STEPS.VIDEO_CREATION;
                    button.disabled = shouldDisable;
                    
                    if (shouldDisable) {
                        button.classList.add('btn-disabled');
                        button.title = 'Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïù¥ÌõÑÏóêÎäî Ïù¥Ï†Ñ Îã®Í≥ÑÎ°ú ÎèåÏïÑÍ∞à Ïàò ÏóÜÏäµÎãàÎã§';
                    } else {
                        button.classList.remove('btn-disabled');
                        button.title = '';
                    }
                }
            });
        } catch (error) {
            handleError(error, 'Previous button state update');
        }
    }

    /**
     * Start automatic video creation process
     */
    startAutomaticVideoCreation() {
        try {
            // Update step description for final video creation
            const progressText = document.querySelector('#step6 .progress-text');
            if (progressText) {
                progressText.textContent = '6/8 Îã®Í≥Ñ - ÏµúÏ¢Ö ÏòÅÏÉÅ Ï†úÏûë';
            }
            
            // Update main heading for final video creation
            const mainHeading = document.querySelector('#step6 .heading');
            if (mainHeading) {
                mainHeading.innerHTML = 'üé¨ ÏµúÏ¢Ö ÏòÅÏÉÅ Ï†úÏûë Ï§ë...';
            }
            
            // Update description for final video creation
            const description = document.querySelector('#step6 p');
            if (description) {
                description.textContent = 'ÏÑ†ÌÉùÌïòÏã† ÏãúÎÇòÎ¶¨Ïò§ÏôÄ ÏÑ§Ï†ïÏúºÎ°ú ÏµúÏ¢Ö Í¥ëÍ≥† ÏòÅÏÉÅÏùÑ Ï†úÏûëÌïòÍ≥† ÏûàÏäµÎãàÎã§.';
            }
            
            // Ensure progress bar color is blue for final video creation
            const progressBar = document.getElementById('progressBar');
            if (progressBar) {
                progressBar.style.background = 'linear-gradient(90deg, #3182ce, #2c5aa0)';
            }
            
            // Hide step 6 action buttons
            this.uiController.toggleElement('step6Actions', false);
            
            // Start progress simulation
            let progress = VIDEO_CONFIG.INITIAL_PROGRESS;
            let statusIndex = 0;
            
            // Custom status messages for final video creation
            const finalVideoStatuses = [
                'ÏãúÎÇòÎ¶¨Ïò§ Î∂ÑÏÑù Ï§ë...',
                'AI Î™®Îç∏ Ï§ÄÎπÑ Ï§ë...',
                'Ï≤´ Î≤àÏß∏ Ïû•Î©¥ ÏÉùÏÑ± Ï§ë...',
                'Îëê Î≤àÏß∏ Ïû•Î©¥ ÏÉùÏÑ± Ï§ë...',
                'ÏÑ∏ Î≤àÏß∏ Ïû•Î©¥ ÏÉùÏÑ± Ï§ë...',
                'Ïû•Î©¥Îì§ Ïó∞Í≤∞ Ï§ë...',
                'Ïò§ÎîîÏò§ Ï∂îÍ∞Ä Ï§ë...',
                'ÏµúÏ¢Ö Ìé∏Ïßë Ï§ë...',
                'ÏµúÏ¢Ö ÏòÅÏÉÅ ÏôÑÏÑ±!'
            ];
            
            const progressInterval = setInterval(() => {
                progress += Math.random() * VIDEO_CONFIG.MAX_PROGRESS_STEP + VIDEO_CONFIG.MIN_PROGRESS_STEP;
                if (progress > 100) progress = 100;
                
                this.uiController.updateProgress(progress, finalVideoStatuses[statusIndex]);
                
                if (statusIndex < finalVideoStatuses.length - 1) {
                    statusIndex++;
                }
                
                if (progress >= 100) {
                    clearInterval(progressInterval);
                    this.dataService.updateField('videoCreated', true);
                    
                    setTimeout(() => {
                        showToast('ÏµúÏ¢Ö ÏòÅÏÉÅ Ï†úÏûëÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üé¨', 'success');
                        this.nextStep();
                    }, VIDEO_CONFIG.COMPLETION_DELAY);
                }
            }, VIDEO_CONFIG.PROGRESS_INTERVAL);
            
        } catch (error) {
            handleError(error, 'Video creation process');
        }
    }

    /**
     * Start video regeneration progress (after cut selection)
     */
    startVideoRegenerationProgress() {
        try {
            // Show video creation progress section
            const videoCreationProgress = document.getElementById('videoCreationProgress');
            const imagePreviewSection = document.getElementById('imagePreviewSection');
            
            if (videoCreationProgress) {
                videoCreationProgress.style.display = 'block';
            }
            if (imagePreviewSection) {
                imagePreviewSection.style.display = 'none';
            }
            
            // Update step description for final video creation
            const progressText = document.querySelector('#step6 .progress-text');
            if (progressText) {
                progressText.textContent = '6/8 Îã®Í≥Ñ - ÏµúÏ¢Ö ÏòÅÏÉÅ Ï†úÏûë';
            }
            
            // Update main heading for final video creation
            const mainHeading = document.querySelector('#step6 .heading');
            if (mainHeading) {
                mainHeading.innerHTML = 'üé¨ ÏµúÏ¢Ö ÏòÅÏÉÅ Ï†úÏûë Ï§ë...';
            }
            
            // Update description for final video creation
            const description = document.querySelector('#step6 p');
            if (description) {
                description.textContent = 'ÏÑ†ÌÉùÌïòÏã† ÏòÅÏÉÅ Ïª∑ÏúºÎ°ú ÏµúÏ¢Ö Í¥ëÍ≥† ÏòÅÏÉÅÏùÑ Ï†úÏûëÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÏôÑÏÑ±Îêú ÏòÅÏÉÅÏùÑ ÌôïÏù∏ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.';
            }
            
            // Change progress bar color to blue for final video creation
            const progressBar = document.getElementById('progressBar');
            if (progressBar) {
                progressBar.style.background = 'linear-gradient(90deg, #3182ce, #2c5aa0)';
            }
            
            // Hide step 6 action buttons
            this.uiController.toggleElement('step6Actions', false);
            
            // Start progress simulation for regeneration
            let progress = VIDEO_CONFIG.INITIAL_PROGRESS;
            let statusIndex = 0;
            
            // Custom status messages for final video creation
            const regenerationStatuses = [
                'ÏÑ†ÌÉùÎêú Ïª∑ Î∂ÑÏÑù Ï§ë...',
                'ÏµúÏ¢Ö ÏòÅÏÉÅ Ïä§ÌÉÄÏùº Ï†ÅÏö© Ï§ë...',
                'Ï≤´ Î≤àÏß∏ Ïª∑ ÏµúÏ¢Ö Ìé∏Ïßë Ï§ë...',
                'Îëê Î≤àÏß∏ Ïª∑ ÏµúÏ¢Ö Ìé∏Ïßë Ï§ë...',
                'ÏÑ∏ Î≤àÏß∏ Ïª∑ ÏµúÏ¢Ö Ìé∏Ïßë Ï§ë...',
                'Ïª∑Îì§ Ïó∞Í≤∞ Î∞è ÏãúÌÄÄÏã± Ï§ë...',
                'Ïò§ÎîîÏò§ ÎèôÍ∏∞Ìôî Î∞è ÎØπÏã± Ï§ë...',
                'ÏµúÏ¢Ö Í¥ëÍ≥† ÏòÅÏÉÅ ÏôÑÏÑ± Ï§ë...',
                'ÏµúÏ¢Ö ÏòÅÏÉÅ Ï†úÏûë ÏôÑÎ£å!'
            ];
            
            const progressInterval = setInterval(() => {
                progress += Math.random() * VIDEO_CONFIG.MAX_PROGRESS_STEP + VIDEO_CONFIG.MIN_PROGRESS_STEP;
                if (progress > 100) progress = 100;
                
                this.uiController.updateProgress(progress, regenerationStatuses[statusIndex]);
                
                if (statusIndex < regenerationStatuses.length - 1) {
                    statusIndex++;
                }
                
                if (progress >= 100) {
                    clearInterval(progressInterval);
                    
                    // Reset the regeneration flag and mark as completed
                    window.videoRegenerationInProgress = false;
                    window.videoRegenerationCompleted = true;
                    window.videoCompletionTime = Date.now(); // Track completion time
                    // Reset image to video flag since regeneration is complete
                    window.imageToVideoInProgress = false;
                    
                    setTimeout(() => {
                        showToast('ÏµúÏ¢Ö ÏòÅÏÉÅ Ï†úÏûëÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üé¨', 'success');
                        // Navigate to Step 7 (Results) and set navigation guard
                        window.preventStep8Navigation = true;
                        this.goToStep(7);
                        
                        // Clear the navigation guard after a delay
                        setTimeout(() => {
                            window.preventStep8Navigation = false;
                        }, 5000);
                    }, VIDEO_CONFIG.COMPLETION_DELAY);
                }
            }, VIDEO_CONFIG.PROGRESS_INTERVAL);
            
        } catch (error) {
            handleError(error, 'Video regeneration process');
        }
    }

    /**
     * Start image-to-video generation progress (after image selection)
     */
    startImageToVideoProgress() {
        try {
            // Show video creation progress section
            const videoCreationProgress = document.getElementById('videoCreationProgress');
            const imagePreviewSection = document.getElementById('imagePreviewSection');
            
            if (videoCreationProgress) {
                videoCreationProgress.style.display = 'block';
            }
            if (imagePreviewSection) {
                imagePreviewSection.style.display = 'none';
            }
            
            // Update step description for video cut generation
            const progressText = document.querySelector('#step6 .progress-text');
            if (progressText) {
                progressText.textContent = '6/8 Îã®Í≥Ñ - ÏòÅÏÉÅ Ïª∑ ÏÉùÏÑ±';
            }
            
            // Update main heading for video cut generation
            const mainHeading = document.querySelector('#step6 .heading');
            if (mainHeading) {
                mainHeading.innerHTML = '‚úÇÔ∏è ÏòÅÏÉÅ Ïª∑ ÏÉùÏÑ± Ï§ë...';
            }
            
            // Update description for video cut generation
            const description = document.querySelector('#step6 p');
            if (description) {
                description.textContent = 'ÏÑ†ÌÉùÌïòÏã† Ïù¥ÎØ∏ÏßÄÎ°ú Í∞úÎ≥Ñ ÏòÅÏÉÅ Ïª∑ÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÏÉùÏÑ±Îêú Ïª∑Îì§ Ï§ëÏóêÏÑú ÏÑ†ÌÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.';
            }
            
            // Change progress bar color to orange for video cut generation
            const progressBar = document.getElementById('progressBar');
            if (progressBar) {
                progressBar.style.background = 'linear-gradient(90deg, #ed8936, #f56500)';
            }
            
            // Hide step 6 action buttons
            this.uiController.toggleElement('step6Actions', false);
            
            // Start progress simulation for image-to-video generation
            let progress = VIDEO_CONFIG.INITIAL_PROGRESS;
            let statusIndex = 0;
            
            // Custom status messages for video cut generation
            const imageToVideoStatuses = [
                'ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ï§ë...',
                'Ïù¥ÎØ∏ÏßÄ ÌíàÏßà ÏµúÏ†ÅÌôî Ï§ë...',
                'Ï≤´ Î≤àÏß∏ ÏòÅÏÉÅ Ïª∑ ÏÉùÏÑ± Ï§ë...',
                'Îëê Î≤àÏß∏ ÏòÅÏÉÅ Ïª∑ ÏÉùÏÑ± Ï§ë...',
                'ÏÑ∏ Î≤àÏß∏ ÏòÅÏÉÅ Ïª∑ ÏÉùÏÑ± Ï§ë...',
                'Í∞úÎ≥Ñ Ïª∑ ÌõÑÏ≤òÎ¶¨ Ï§ë...',
                'Ïª∑ ÏÑ†ÌÉùÏßÄ Ï§ÄÎπÑ Ï§ë...',
                'ÏòÅÏÉÅ Ïª∑ ÏµúÏ†ÅÌôî Ï§ë...',
                'ÏòÅÏÉÅ Ïª∑ Ï§ÄÎπÑ ÏôÑÎ£å!'
            ];
            
            const progressInterval = setInterval(() => {
                progress += Math.random() * VIDEO_CONFIG.MAX_PROGRESS_STEP + VIDEO_CONFIG.MIN_PROGRESS_STEP;
                if (progress > 100) progress = 100;
                
                this.uiController.updateProgress(progress, imageToVideoStatuses[statusIndex]);
                
                if (statusIndex < imageToVideoStatuses.length - 1) {
                    statusIndex++;
                }
                
                if (progress >= 100) {
                    clearInterval(progressInterval);
                    
                    // Reset the image-to-video flag
                    window.imageToVideoInProgress = false;
                    
                    setTimeout(() => {
                        showToast('ÏòÅÏÉÅ Ïª∑ ÏÉùÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! Ïª∑ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî. ‚úÇÔ∏è', 'success');
                        // Navigate to Step 8 (Video Cut Selection)
                        this.goToStep(8);
                        
                        // Initialize video cuts after navigation
                        setTimeout(() => {
                            initializeVideoCuts();
                        }, 300);
                    }, VIDEO_CONFIG.COMPLETION_DELAY);
                }
            }, VIDEO_CONFIG.PROGRESS_INTERVAL);
            
        } catch (error) {
            handleError(error, 'Image-to-video generation process');
        }
    }

    /**
     * Start partial video regeneration progress for mixed scenarios
     */
    startPartialVideoRegenerationProgress() {
        try {
            // Show video creation progress section
            const videoCreationProgress = document.getElementById('videoCreationProgress');
            const imagePreviewSection = document.getElementById('imagePreviewSection');
            
            if (videoCreationProgress) {
                videoCreationProgress.style.display = 'block';
            }
            if (imagePreviewSection) {
                imagePreviewSection.style.display = 'none';
            }
            
            // Get current cut configuration
            const cutConfiguration = window.currentCutConfiguration || {};
            const regeneratingCuts = Object.keys(cutConfiguration).filter(cut => cutConfiguration[cut] === 'regenerate');
            
            // Update step description for partial regeneration
            const progressText = document.querySelector('#step6 .progress-text');
            if (progressText) {
                progressText.textContent = '6/8 Îã®Í≥Ñ - Î∂ÄÎ∂Ñ ÏòÅÏÉÅ Ïû¨ÏÉùÏÑ±';
            }
            
            // Update main heading for partial regeneration
            const mainHeading = document.querySelector('#step6 .heading');
            if (mainHeading) {
                mainHeading.innerHTML = 'üîÑ ÏÑ†ÌÉù Ïª∑ Ïû¨ÏÉùÏÑ± Ï§ë...';
            }
            
            // Update description for partial regeneration
            const description = document.querySelector('#step6 p');
            if (description) {
                description.textContent = `${regeneratingCuts.length}Í∞úÏùò Ïª∑ÏùÑ ÏÉàÎ°ú ÏÉùÏÑ±ÌïòÍ≥† Í∏∞Ï°¥ Ïª∑Í≥º Í≤∞Ìï©ÌïòÏó¨ ÏµúÏ¢Ö ÏòÅÏÉÅÏùÑ Ï†úÏûëÌïòÍ≥† ÏûàÏäµÎãàÎã§.`;
            }
            
            // Change progress bar color to orange for partial regeneration
            const progressBar = document.getElementById('progressBar');
            if (progressBar) {
                progressBar.style.background = 'linear-gradient(90deg, #ed8936, #f56500)';
            }
            
            // Hide step 6 action buttons
            this.uiController.toggleElement('step6Actions', false);
            
            // Start progress simulation for partial regeneration
            let progress = VIDEO_CONFIG.INITIAL_PROGRESS;
            let statusIndex = 0;
            
            // Custom status messages for partial regeneration
            const partialRegenerationStatuses = [
                'ÏÑ†ÌÉùÎêú Ïª∑ Î∂ÑÏÑù Ï§ë...',
                'Í∏∞Ï°¥ Ïª∑ Î≥¥Ï°¥ Ï≤òÎ¶¨ Ï§ë...',
                'ÏÉàÎ°ú ÏÉùÏÑ±Ìï† Ïª∑ Ï§ÄÎπÑ Ï§ë...',
                'Î∂ÄÎ∂Ñ Ïû¨ÏÉùÏÑ± ÏãúÏûë Ï§ë...',
                'Ïû¨ÏÉùÏÑ±Îêú Ïª∑ ÌíàÏßà ÌôïÏù∏ Ï§ë...',
                'Í∏∞Ï°¥ Ïª∑Í≥º Í≤∞Ìï© Ï§ë...',
                'ÏµúÏ¢Ö ÏòÅÏÉÅ Ìé∏Ïßë Ï§ë...',
                'Î∂ÄÎ∂Ñ Ïû¨ÏÉùÏÑ± ÏôÑÎ£å!'
            ];
            
            const progressInterval = setInterval(() => {
                progress += Math.random() * VIDEO_CONFIG.MAX_PROGRESS_STEP + VIDEO_CONFIG.MIN_PROGRESS_STEP;
                if (progress > 100) progress = 100;
                
                this.uiController.updateProgress(progress, partialRegenerationStatuses[statusIndex]);
                
                if (statusIndex < partialRegenerationStatuses.length - 1) {
                    statusIndex++;
                }
                
                if (progress >= 100) {
                    clearInterval(progressInterval);
                    
                    // Reset the regeneration flags and mark as completed
                    window.videoRegenerationInProgress = false;
                    window.partialRegenerationInProgress = false;
                    window.videoRegenerationCompleted = true;
                    window.videoCompletionTime = Date.now();
                    
                    setTimeout(() => {
                        showToast('Î∂ÄÎ∂Ñ ÏòÅÏÉÅ Ïû¨ÏÉùÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üé¨', 'success');
                        // Navigate to Step 7 (Results) and set navigation guard
                        window.preventStep8Navigation = true;
                        this.goToStep(7);
                        
                        // Clear the navigation guard after a delay
                        setTimeout(() => {
                            window.preventStep8Navigation = false;
                        }, 5000);
                    }, VIDEO_CONFIG.COMPLETION_DELAY);
                }
            }, VIDEO_CONFIG.PROGRESS_INTERVAL);
            
        } catch (error) {
            handleError(error, 'Partial video regeneration process');
        }
    }

    /**
     * Update final information display
     */
    updateFinalInfo() {
        try {
            const data = this.dataService.getData();
            
            this.uiController.updateElement('finalProduct', data.productName || '-');
            this.uiController.updateElement('finalTarget', this.getTargetText(data.targetAudience));
            this.uiController.updateElement('finalStyle', this.getStyleText(data.style));
            this.uiController.updateElement('finalFormat', this.getFormatText(data.format));
            this.uiController.updateElement('finalDuration', data.duration || '-');
        } catch (error) {
            handleError(error, 'Final info update');
        }
    }

    /**
     * Hide advanced edit mode after video regeneration completion
     */
    hideAdvancedEditAfterCompletion() {
        try {
            const advancedEditSection = document.getElementById('advancedEditSection');
            if (advancedEditSection) {
                advancedEditSection.style.display = 'none';
            }
            
            // Show completion message
            showToast('ÏòÅÏÉÅ Ï†úÏûëÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! Îã§Ïö¥Î°úÎìúÌïòÍ±∞ÎÇò ÏÉà Í¥ëÍ≥†Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.', 'success');
            
            // Reset the completion flag but DON'T automatically show advanced edit section
            setTimeout(() => {
                window.videoRegenerationCompleted = false;
                window.advancedEditAlreadyHidden = false;
                // Only reset cameFromImageSelection if we're not in image selection workflow
                // This prevents issues with flag timing
                if (window.cameFromImageSelection) {
                    console.log('Preserving cameFromImageSelection flag');
                } else {
                    window.cameFromImageSelection = false;
                }
                // Don't automatically show advanced edit section to prevent navigation loop
                // User can manually scroll down to see it if needed
            }, 1500);
        } catch (error) {
            handleError(error, 'Advanced edit completion handling');
        }
    }

    /**
     * Get human-readable target audience text
     */
    getTargetText(target) {
        const targets = {
            'teens': '10ÎåÄ (13-19ÏÑ∏)',
            'twenties': '20ÎåÄ (20-29ÏÑ∏)',
            'thirties': '30ÎåÄ (30-39ÏÑ∏)',
            'forties': '40ÎåÄ (40-49ÏÑ∏)',
            'fifties': '50ÎåÄ Ïù¥ÏÉÅ',
            'all': 'Ï†Ñ Ïó∞Î†πÎåÄ'
        };
        return targets[target] || '-';
    }

    /**
     * Get human-readable style text
     */
    getStyleText(style) {
        const styles = {
            'action': 'Ïï°ÏÖò Ïä§ÌÉÄÏùº',
            'romance': 'Î©úÎ°úÎìúÎùºÎßà Ïä§ÌÉÄÏùº',
            'thriller': 'Ïä§Î¶¥Îü¨ Ïä§ÌÉÄÏùº',
            'comedy': 'ÏΩîÎØ∏Îîî Ïä§ÌÉÄÏùº',
            'documentary': 'Îã§ÌÅêÎ©òÌÑ∞Î¶¨ Ïä§ÌÉÄÏùº'
        };
        return styles[style] || '-';
    }

    /**
     * Get human-readable format text
     */
    getFormatText(format) {
        const formats = {
            'youtube': 'Ïú†ÌäúÎ∏å Í¥ëÍ≥†',
            'instagram': 'Ïù∏Ïä§ÌÉÄÍ∑∏Îû® ÌîºÎìú',
            'reels': 'Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Î¶¥Ïä§',
            'shorts': 'Ïú†ÌäúÎ∏å ÏáºÏ∏†'
        };
        return formats[format] || '-';
    }
}

/**
 * DOM Cache class for performance optimization
 */
class DOMCache {
    constructor() {
        this.cache = new Map();
    }

    /**
     * Get element(s) from cache or create new entry
     */
    get(key, factory) {
        if (!this.cache.has(key)) {
            this.cache.set(key, factory());
        }
        return this.cache.get(key);
    }

    /**
     * Clear cache
     */
    clear() {
        this.cache.clear();
    }

    /**
     * Remove specific key from cache
     */
    delete(key) {
        this.cache.delete(key);
    }
}

// ========================================
// Global Functions (for backward compatibility)
// ========================================

let app; // Global app instance

/**
 * Initialize the application
 */
function initializeApp() {
    try {
        app = new VideoCreationApp();
    } catch (error) {
        handleError(error, 'Application initialization');
    }
}

/**
 * Model selection handler
 */
async function selectModel(element, modelId, tier) {
    try {
        app.uiController.clearSelections('#step1');
        element.classList.add('selected');
        
        app.dataService.updateField('model', modelId);
        app.dataService.updateField('modelTier', tier);
        
        // Handle registered models
        if (modelId.startsWith('model_')) {
            try {
                // Load model details from database
                const modelDetails = await xbrushDB.getModelDetails(modelId);
                if (modelDetails) {
                    app.dataService.updateField('modelDetails', modelDetails);
                    
                    // Check contract terms
                    if (modelDetails.contract.requiresReview) {
                        showToast('Ïù¥ Î™®Îç∏ÏùÄ ÏÇ¨Ï†Ñ Í≤ÄÌÜ†Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.', 'info');
                    }
                    
                    // Check contract expiration
                    const expiresAt = new Date(modelDetails.contract.expiresAt);
                    if (expiresAt < new Date()) {
                        showToast('‚ö†Ô∏è Ïù¥ Î™®Îç∏Ïùò Í≥ÑÏïΩÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.', 'warning');
                        return;
                    }
                }
                
                // Track usage
                await xbrushDB.trackUsage(modelId);
                
                showToast('üé¨ Îì±Î°ùÎêú AI Î™®Îç∏Ïù¥ ÏÑ†ÌÉùÎêòÏóàÏäµÎãàÎã§! 100 ÌÅ¨Î†àÎîßÏù¥ Ï∞®Í∞êÎê©ÎãàÎã§.', 'info');
                
            } catch (error) {
                console.error('Error handling registered model:', error);
                showToast('Î™®Îç∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
                return;
            }
        } else if (tier === 'premium') {
            showToast('üé¨ ÌîÑÎ¶¨ÎØ∏ÏóÑ Î∞∞Ïö∞Í∞Ä ÏÑ†ÌÉùÎêòÏóàÏäµÎãàÎã§! 100 ÌÅ¨Î†àÎîßÏù¥ Ï∞®Í∞êÎê©ÎãàÎã§.', 'info');
        }
        
        app.stepManager.checkNextButton();
    } catch (error) {
        handleError(error, 'Model selection');
    }
}

/**
 * Format selection handler
 */
function selectFormat(element, formatId) {
    try {
        app.uiController.clearSelections('#step3');
        element.classList.add('selected');
        
        app.dataService.updateField('format', formatId);
        app.stepManager.checkNextButton();
    } catch (error) {
        handleError(error, 'Format selection');
    }
}

/**
 * Duration selection handler
 */
function selectDuration(element, duration) {
    try {
        const parent = element.parentElement;
        if (parent) {
            const cards = parent.querySelectorAll('.card');
            cards.forEach(card => card.classList.remove('selected'));
        }
        
        element.classList.add('selected');
        app.dataService.updateField('duration', duration);
        app.stepManager.checkNextButton();
    } catch (error) {
        handleError(error, 'Duration selection');
    }
}

/**
 * Style selection handler
 */
function selectStyle(element, styleId) {
    try {
        app.uiController.clearSelections('#step4');
        element.classList.add('selected');
        
        app.dataService.updateField('style', styleId);
        app.stepManager.checkNextButton();
    } catch (error) {
        handleError(error, 'Style selection');
    }
}

/**
 * Image selection handler
 */
function selectImage(element, cut, imageId) {
    try {
        const parent = element.parentElement;
        if (parent) {
            const options = parent.querySelectorAll('.image-option');
            options.forEach(option => option.classList.remove('selected'));
        }
        
        element.classList.add('selected');
        
        const data = app.dataService.getData();
        data.selectedImages[cut] = imageId;
        app.dataService.updateField('selectedImages', data.selectedImages);
        
        app.stepManager.checkNextButton();
        checkImageSelectionButton();
    } catch (error) {
        handleError(error, 'Image selection');
    }
}

/**
 * Navigation functions
 */
function nextStep() {
    if (app) app.stepManager.nextStep();
}

function prevStep() {
    if (app) app.stepManager.prevStep();
}

function goToStep(step) {
    if (app) app.stepManager.goToStep(step);
}

/**
 * Video regeneration function
 */
function startVideoRegenerationProgress() {
    if (app && app.stepManager) {
        app.stepManager.startVideoRegenerationProgress();
    }
}

/**
 * Image-to-video generation function
 */
function startImageToVideoProgress() {
    if (app && app.stepManager) {
        app.stepManager.startImageToVideoProgress();
    }
}

/**
 * Scenario functions
 */
function approveScenario() {
    try {
        app.dataService.updateField('scenarioApproved', true);
        app.stepManager.checkNextButton();
        
        const nextButton = safeGetElement('step5Next');
        if (nextButton) {
            nextButton.style.display = 'block';
        }
        
        showToast('ÏãúÎÇòÎ¶¨Ïò§Í∞Ä ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§! ÏòÅÏÉÅ Ï†úÏûëÏùÑ ÏãúÏûëÌï† Ïàò ÏûàÏäµÎãàÎã§.', 'success');
        
        setTimeout(() => {
            nextStep();
        }, 1000);
    } catch (error) {
        handleError(error, 'Scenario approval');
    }
}

function modifyScenario() {
    try {
        app.uiController.toggleElement('editMode', true);
        app.uiController.toggleElement('replaceMode', false);
    } catch (error) {
        handleError(error, 'Scenario modification');
    }
}

function replaceScenario() {
    try {
        app.uiController.toggleElement('replaceMode', true);
        app.uiController.toggleElement('editMode', false);
    } catch (error) {
        handleError(error, 'Scenario replacement');
    }
}

function cancelEdit() {
    try {
        app.uiController.toggleElement('editMode', false);
    } catch (error) {
        handleError(error, 'Edit cancellation');
    }
}

function saveEdit() {
    try {
        const scene1 = safeGetElement('editScene1');
        const scene2 = safeGetElement('editScene2');
        const scene3 = safeGetElement('editScene3');
        
        if (scene1 && scene2 && scene3) {
            app.uiController.updateElement('scene1Text', sanitizeInput(scene1.value));
            app.uiController.updateElement('scene2Text', sanitizeInput(scene2.value));
            app.uiController.updateElement('scene3Text', sanitizeInput(scene3.value));
        }
        
        app.uiController.toggleElement('editMode', false);
        showToast('ÏãúÎÇòÎ¶¨Ïò§Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!', 'success');
    } catch (error) {
        handleError(error, 'Edit saving');
    }
}

/**
 * Final step functions
 */
function downloadVideo() {
    try {
        showToast('ÏòÅÏÉÅÏùÑ Îã§Ïö¥Î°úÎìúÌï©ÎãàÎã§!', 'info');
        // Actual download logic would go here
    } catch (error) {
        handleError(error, 'Video download');
    }
}

function shareVideo() {
    try {
        showToast('ÏòÅÏÉÅÏùÑ Í≥µÏú†Ìï©ÎãàÎã§!', 'info');
        // Actual sharing logic would go here
    } catch (error) {
        handleError(error, 'Video sharing');
    }
}

function startOver() {
    try {
        if (app) {
            app.dataService.reset();
            app.stepManager.goToStep(1);
            
            // Clear all selections
            const selectedCards = safeGetElements('.card.selected');
            selectedCards.forEach(card => card.classList.remove('selected'));
            
            // Clear form inputs
            const inputs = safeGetElements('.form-input, .form-select');
            inputs.forEach(input => {
                input.value = '';
            });
            
            // Reset step indicators
            const steps = safeGetElements('.step');
            steps.forEach(step => {
                step.classList.remove('completed', 'active');
            });
            
            showToast('ÏÉàÎ°úÏö¥ Í¥ëÍ≥† Ï†úÏûëÏùÑ ÏãúÏûëÌï©ÎãàÎã§!', 'success');
        }
    } catch (error) {
        handleError(error, 'Application reset');
    }
}

function goToLibrary() {
    try {
        showToast('Í¥ëÍ≥† Î≥¥Í¥ÄÌï®ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§!', 'info');
        // Actual navigation logic would go here
    } catch (error) {
        handleError(error, 'Library navigation');
    }
}

function applyAsModel() {
    try {
        showToast('Î™®Îç∏ Îì±Î°ù ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§! üåü', 'info');
        // Navigate to model registration page
        setTimeout(() => {
            window.location.href = URLS.MODEL_REGISTRATION;
        }, 1000);
    } catch (error) {
        handleError(error, 'Model application');
    }
}

/**
 * Advanced Edit Mode Functions
 */
function showAdvancedEdit() {
    // Advanced Edit Mode is now always visible, so just scroll to it
    try {
        const advancedEditSection = document.getElementById('advancedEditSection');
        if (advancedEditSection) {
            // Make sure it's visible (in case it was hidden after completion)
            advancedEditSection.style.display = 'block';
            
            advancedEditSection.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
            showToast('Í≥†Í∏â Ìé∏Ïßë ÏòµÏÖòÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî!', 'info');
        }
    } catch (error) {
        console.error('Error in showAdvancedEdit:', error);
    }
}

function hideAdvancedEdit() {
    // Since Advanced Edit Mode is always visible, just scroll back to video
    try {
        const videoSection = document.querySelector('.video-info-grid');
        if (videoSection) {
            videoSection.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }
        showToast('Í≥†Í∏â Ìé∏ÏßëÏùÑ Ï∑®ÏÜåÌñàÏäµÎãàÎã§.', 'info');
    } catch (error) {
        console.error('Error in hideAdvancedEdit:', error);
    }
}

function showVideoRegenerationProgress() {
    // Show a visual indication that video is being regenerated
    try {
        const videoSection = document.querySelector('.video-info-grid video');
        if (videoSection) {
            // Add a loading overlay
            const overlay = document.createElement('div');
            overlay.id = 'regeneration-overlay';
            overlay.style.cssText = `
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(49, 130, 206, 0.9);
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: 600;
                border-radius: 12px;
                z-index: 10;
            `;
            overlay.innerHTML = `
                <div style="text-align: center;">
                    <div style="font-size: 48px; margin-bottom: 16px;">üé¨</div>
                    <div>ÏòÅÏÉÅ Ïû¨ÏÉùÏÑ± Ï§ë...</div>
                    <div style="font-size: 12px; opacity: 0.8; margin-top: 8px;">Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî</div>
                </div>
            `;
            
            const videoContainer = videoSection.parentElement;
            if (videoContainer) {
                videoContainer.style.position = 'relative';
                videoContainer.appendChild(overlay);
                
                // Remove overlay after regeneration
                setTimeout(() => {
                    if (overlay && overlay.parentElement) {
                        overlay.parentElement.removeChild(overlay);
                    }
                }, 3000);
            }
        }
    } catch (error) {
        console.error('Error showing regeneration progress:', error);
    }
}

function selectEditOption(option) {
    try {
        let message = '';
        let confirmMessage = '';
        let cost = 0;
        
        switch(option) {
            case 'regenerate-video':
                message = 'ÏòÅÏÉÅÎßå Îã§Ïãú Ï†úÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?';
                confirmMessage = 'Í∞ôÏùÄ Ïù¥ÎØ∏ÏßÄÎ°ú ÏòÅÏÉÅ Ïä§ÌÉÄÏùºÏù¥ÎÇò Ìé∏ÏßëÏùÑ Î≥ÄÍ≤ΩÌï©ÎãàÎã§.';
                cost = 5;
                break;
            case 'regenerate-image':
                message = 'ÏÉà Ïù¥ÎØ∏ÏßÄÎ°ú Ï†úÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?';
                confirmMessage = 'Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉùÎ∂ÄÌÑ∞ Îã§Ïãú ÏãúÏûëÌï©ÎãàÎã§.';
                cost = 10;
                break;
            default:
                console.warn(`Unknown edit option: ${option}`);
                return;
        }
        
        const confirmed = confirm(`${message}\n\n${confirmMessage}\n\nÎπÑÏö©: ${cost} ÌÜ†ÌÅ∞Ïù¥ ÏÜåÎ™®Îê©ÎãàÎã§.`);
        
        if (confirmed) {
            executeEditOption(option, cost);
        }
    } catch (error) {
        handleError(error, 'Edit option selection');
    }
}

function executeEditOption(option, cost) {
    try {
        switch(option) {
            case 'regenerate-video':
                // Add navigation guard to prevent immediate re-navigation after completion
                if (window.videoRegenerationCompleted && Date.now() - window.videoCompletionTime < 5000) {
                    showToast('ÏòÅÏÉÅ Ï†úÏûëÏù¥ Î∞©Í∏à ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
                    return;
                }
                
                showToast(`ÏòÅÏÉÅ Ïª∑ ÏÑ†ÌÉù ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.`, 'info');
                
                // Reset the image selection flag since this is video-only regeneration
                window.cameFromImageSelection = false;
                
                // Navigate to Step 8 (Video Cut Selection)
                setTimeout(() => {
                    if (app && app.stepManager) {
                        app.stepManager.goToStep(8);
                        // Initialize video cuts after navigation
                        setTimeout(() => {
                            initializeVideoCuts();
                        }, 300);
                    }
                }, 500);
                break;
                
            case 'regenerate-image':
                showToast(`ÏÉà Ïù¥ÎØ∏ÏßÄÎ°ú Ï†úÏûëÏùÑ ÏãúÏûëÌï©ÎãàÎã§. (${cost} ÌÜ†ÌÅ∞ ÏÜåÎ™®)`, 'info');
                
                // Set a flag to prevent automatic video creation
                window.skipAutoVideoCreation = true;
                
                // Navigate back to step 6 for image selection
                setTimeout(() => {
                    // Use direct step manager navigation to avoid auto-triggers
                    if (app && app.stepManager) {
                        app.stepManager.goToStep(6);
                        
                        // After navigation, force show image preview section
                        setTimeout(() => {
                            const videoCreationProgress = document.getElementById('videoCreationProgress');
                            const imagePreviewSection = document.getElementById('imagePreviewSection');
                            
                            if (videoCreationProgress) {
                                videoCreationProgress.style.display = 'none';
                            }
                            
                            // Force trigger image preview
                            if (typeof showImagePreviewOption === 'function') {
                                showImagePreviewOption();
                            }
                            
                            showToast('Ïù¥ÎØ∏ÏßÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.', 'info');
                        }, 300);
                    } else {
                        console.error('App stepManager not found');
                        showToast('Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ® Ìï¥Ï£ºÏÑ∏Ïöî.', 'error');
                    }
                }, 1000);
                break;
        }
    } catch (error) {
        handleError(error, 'Edit option execution');
    }
}

function satisfiedWithVideo() {
    try {
        showToast('ÏòÅÏÉÅÏù¥ ÎßàÏùåÏóê ÎìúÏã†Îã§Îãà Í∏∞ÏÅ©ÎãàÎã§! üéâ', 'success');
        
        // You could add additional logic here, such as:
        // - Saving the video to user's library
        // - Updating user preferences
        // - Showing download/share options
        
        setTimeout(() => {
            showToast('ÏòÅÏÉÅÏùÑ Îã§Ïö¥Î°úÎìúÌïòÍ±∞ÎÇò Í≥µÏú†Ìï¥Î≥¥ÏÑ∏Ïöî!', 'info');
        }, 2000);
    } catch (error) {
        handleError(error, 'Video satisfaction');
    }
}

// Image Selection and Management Functions
function showImagePreviewOption() {
    try {
        const imagePreviewSection = document.getElementById('imagePreviewSection');
        const videoCreationProgress = document.getElementById('videoCreationProgress');
        
        if (videoCreationProgress) {
            videoCreationProgress.style.display = 'none';
        }
        if (imagePreviewSection) {
            imagePreviewSection.style.display = 'block';
        } else {
            // If imagePreviewSection doesn't exist, show a placeholder
            showToast('Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º Î°úÎìúÌïòÍ≥† ÏûàÏäµÎãàÎã§...', 'info');
        }
    } catch (error) {
        console.error('Error in showImagePreviewOption:', error);
        showToast('Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù ÌôîÎ©¥ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

function regenerateImages(cut) {
    try {
        console.log(`Regenerating images for cut: ${cut}`); // Debug log
        showToast(`${cut} Ïù¥ÎØ∏ÏßÄÎ•º Îã§Ïãú ÏÉùÏÑ±Ìï©ÎãàÎã§. (3 ÌÜ†ÌÅ∞)`, 'info');
        
        // Try multiple methods to find the image grid
        let imageGrid = document.querySelector(`[data-cut-section="${cut}"]`);
        
        // Fallback: if data-cut-section doesn't work, try direct selection
        if (!imageGrid) {
            console.warn(`Primary selector failed, trying fallback for ${cut}`);
            // Try to find by the structure pattern
            const allImageGrids = document.querySelectorAll('.image-grid');
            if (cut === 'cut1' && allImageGrids[0]) {
                imageGrid = allImageGrids[0];
            } else if (cut === 'cut2' && allImageGrids[1]) {
                imageGrid = allImageGrids[1];
            } else if (cut === 'cut3' && allImageGrids[2]) {
                imageGrid = allImageGrids[2];
            }
        }
        
        console.log(`Image grid found:`, imageGrid); // Debug log
        
        if (!imageGrid) {
            console.error(`Image grid for ${cut} not found with any method`);
            showToast(`${cut} Ïù¥ÎØ∏ÏßÄ Í∑∏Î¶¨ÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`, 'error');
            return;
        }
        
        // Show loading state
        imageGrid.style.opacity = '0.5';
        imageGrid.style.pointerEvents = 'none';
        
        // Generate new random image URLs for this cut
        setTimeout(() => {
            const imageOptions = imageGrid.querySelectorAll('.image-option');
            console.log(`Found ${imageOptions.length} image options`); // Debug log
            
            imageOptions.forEach((option, index) => {
                // Clear previous selection
                option.classList.remove('selected');
                
                // Generate new random image with higher randomness
                const randomId = Math.floor(Math.random() * 10000) + Date.now() + Math.floor(Math.random() * 1000);
                const img = option.querySelector('img');
                
                if (img) {
                    // Force browser to reload image by adding cache-busting parameter
                    const newImageUrl = `https://picsum.photos/400/225?random=${randomId}_${index}&t=${Date.now()}`;
                    console.log(`Setting new image URL: ${newImageUrl}`); // Debug log
                    
                    // Clear the current src first to force reload
                    img.src = '';
                    
                    // Set new src after a brief delay
                    setTimeout(() => {
                        img.src = newImageUrl;
                        
                        // Add onload event to verify image loads
                        img.onload = () => {
                            console.log(`Image ${index + 1} loaded successfully`);
                        };
                        
                        img.onerror = () => {
                            console.error(`Failed to load image ${index + 1}`);
                            // Fallback to different image service if picsum fails
                            img.src = `https://source.unsplash.com/400x225/?random&sig=${randomId}_${index}`;
                        };
                    }, 50);
                }
                
                // Update onclick to use new image ID
                const newImageId = `${cut}_img${index + 1}_${randomId}`;
                option.setAttribute('onclick', `selectImage(this, '${cut}', '${newImageId}')`);
                option.setAttribute('onkeydown', `if(event.key==='Enter') selectImage(this, '${cut}', '${newImageId}')`);
            });
            
            // Restore interaction
            imageGrid.style.opacity = '1';
            imageGrid.style.pointerEvents = 'auto';
            
            // Update selection status
            checkImageSelectionButton();
            
            showToast(`${cut} Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÉàÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!`, 'success');
        }, 2000);
        
    } catch (error) {
        console.error('Error in regenerateImages:', error);
        showToast('Ïù¥ÎØ∏ÏßÄ Ïû¨ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

function checkImageSelectionButton() {
    try {
        // Check if all cuts have selected images
        const data = app ? app.dataService.getData() : null;
        if (!data) return;
        
        const allSelected = data.selectedImages.cut1 && 
                           data.selectedImages.cut2 && 
                           data.selectedImages.cut3;
        
        const button = document.getElementById('step6ImageNext');
        if (button) {
            button.disabled = !allSelected;
            if (allSelected) {
                button.classList.remove('btn-disabled');
                button.classList.add('btn-primary');
                button.textContent = 'ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄÎ°ú ÏòÅÏÉÅ Ïª∑ ÏÉùÏÑ±';
            } else {
                button.classList.add('btn-disabled');
                button.classList.remove('btn-primary');
                button.textContent = 'Î™®Îì† Ïª∑ ÏÑ†ÌÉù ÌïÑÏöî';
            }
        }
    } catch (error) {
        console.error('Error in checkImageSelectionButton:', error);
    }
}

function startVideoWithSelectedImages() {
    try {
        showToast('ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄÎ°ú ÏòÅÏÉÅÏùÑ Ï†úÏûëÌï©ÎãàÎã§!', 'info');
        if (app && app.stepManager) {
            app.stepManager.nextStep();
        } else {
            // Fallback
            goToStep(7);
        }
    } catch (error) {
        console.error('Error in startVideoWithSelectedImages:', error);
        showToast('ÏòÅÏÉÅ Ï†úÏûëÏùÑ ÏãúÏûëÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

function proceedToVideoCutSelection() {
    try {
        const data = app ? app.dataService.getData() : null;
        if (!data) {
            showToast('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
            return;
        }
        
        // Get current image selection configuration
        const imageConfig = getImageSelectionConfiguration();
        console.log('Image selection configuration:', imageConfig);
        
        // Check if all cuts are ready (either selected images or keep original)
        const cuts = ['cut1', 'cut2', 'cut3'];
        let allReady = true;
        
        for (const cutId of cuts) {
            if (imageConfig[cutId] === 'keep') {
                // Cut is keeping original, so it's ready
                continue;
            } else if (imageConfig[cutId] === 'new') {
                // Cut needs new image selection
                if (!data.selectedImages[cutId]) {
                    allReady = false;
                    break;
                }
            }
        }
        
        if (!allReady) {
            showToast('Î™®Îì† Ïª∑Ïùò Ïù¥ÎØ∏ÏßÄÎ•º ÏÑ†ÌÉùÌïòÍ±∞ÎÇò ÏõêÎ≥∏ Ïú†ÏßÄÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
            return;
        }
        
        // Store image configuration for use during processing
        window.currentImageConfiguration = imageConfig;
        
        // Set flag BEFORE navigation starts to prevent race condition
        window.cameFromImageSelection = true;
        console.log('Setting cameFromImageSelection flag to true');
        
        // Show appropriate message based on configuration
        const keepCount = cuts.filter(cutId => imageConfig[cutId] === 'keep').length;
        const newCount = 3 - keepCount;
        
        if (keepCount === 0) {
            showToast('ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄÎ°ú ÏòÅÏÉÅ Ïª∑ÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...', 'info');
        } else if (newCount === 0) {
            showToast('ÏõêÎ≥∏ ÏòÅÏÉÅÏùÑ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©Ìï©ÎãàÎã§.', 'info');
        } else {
            showToast(`${newCount}Í∞ú Ïª∑ÏùÑ ÏÉàÎ°ú ÏÉùÏÑ±ÌïòÍ≥† ${keepCount}Í∞ú ÏõêÎ≥∏ÏùÑ Ïú†ÏßÄÌï©ÎãàÎã§...`, 'info');
        }
        
        // Navigate to Step 6 to show progress for video generation from selected images
        setTimeout(() => {
            if (app && app.stepManager) {
                app.stepManager.goToStep(6);
                
                // Set flag to trigger image-to-video generation progress
                window.imageToVideoInProgress = true;
                
                // Start the image-to-video generation progress
                setTimeout(() => {
                    startImageToVideoProgress();
                }, 500);
            }
        }, 1000);
    } catch (error) {
        console.error('Error in proceedToVideoCutSelection:', error);
        showToast('ÏòÅÏÉÅ ÏÉùÏÑ±ÏúºÎ°ú Ïù¥ÎèôÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

// Scenario Management Functions  
function cancelReplace() {
    try {
        const replaceMode = document.getElementById('replaceMode');
        if (replaceMode) {
            replaceMode.style.display = 'none';
        }
        showToast('ÏàòÏ†ïÏùÑ Ï∑®ÏÜåÌñàÏäµÎãàÎã§.', 'info');
    } catch (error) {
        console.error('Error in cancelReplace:', error);
    }
}

function generateNewScenario() {
    try {
        showToast('ÏÉà ÏãúÎÇòÎ¶¨Ïò§Î•º ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§... (5 ÌÜ†ÌÅ∞)', 'info');
        
        // Simulate scenario generation
        setTimeout(() => {
            showToast('ÏÉà ÏãúÎÇòÎ¶¨Ïò§Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!', 'success');
            // In real app, this would update the scenario content
        }, 2000);
    } catch (error) {
        console.error('Error in generateNewScenario:', error);
        showToast('ÏãúÎÇòÎ¶¨Ïò§ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

function backToVideoOptions() {
    try {
        const imagePreviewSection = document.getElementById('imagePreviewSection');
        const videoCreationProgress = document.getElementById('videoCreationProgress');
        
        if (imagePreviewSection) {
            imagePreviewSection.style.display = 'none';
        }
        if (videoCreationProgress) {
            videoCreationProgress.style.display = 'block';
        }
        
        showToast('ÏòÅÏÉÅ Ï†úÏûë ÏòµÏÖòÏúºÎ°ú ÎèåÏïÑÍ∞ëÎãàÎã§.', 'info');
    } catch (error) {
        console.error('Error in backToVideoOptions:', error);
    }
}

// Video Cut Selection Functions (Step 8)

function initializeVideoCuts() {
    try {
        // Mark all cuts as NOT selected initially
        const cuts = ['cut1', 'cut2', 'cut3'];
        cuts.forEach(cut => {
            const button = document.querySelector(`[data-cut="${cut}"]`);
            if (button) {
                button.classList.remove('selected');
                button.classList.remove('btn-selected');
                button.classList.add('btn-success');
                button.innerHTML = 'Ïù¥ Ïª∑ ÏÇ¨Ïö©';
            }
        });
        
        // Update proceed button state (should be disabled initially)
        updateProceedButton();
        
        // Auto-play videos
        const videos = document.querySelectorAll('.cut-video');
        videos.forEach(video => {
            video.play().catch(e => console.log('Video autoplay prevented:', e));
        });
    } catch (error) {
        console.error('Error in initializeVideoCuts:', error);
    }
}

function selectVideoCut(cutId) {
    try {
        const button = document.querySelector(`[data-cut="${cutId}"]`);
        if (button) {
            // Toggle selection
            if (button.classList.contains('selected')) {
                // Deselect
                button.classList.remove('selected');
                button.classList.remove('btn-selected');
                button.classList.add('btn-success');
                button.innerHTML = 'Ïù¥ Ïª∑ ÏÇ¨Ïö©';
            } else {
                // Select
                button.classList.add('selected');
                button.classList.remove('btn-success');
                button.classList.add('btn-selected');
                button.innerHTML = '‚úì ÏÑ†ÌÉùÎê®';
            }
            
            // Check if at least one cut is selected
            updateProceedButton();
            showToast(`${cutId}Ïù¥(Í∞Ä) ${button.classList.contains('selected') ? 'ÏÑ†ÌÉù' : 'ÏÑ†ÌÉù Ìï¥Ï†ú'}ÎêòÏóàÏäµÎãàÎã§.`, 'info');
        }
    } catch (error) {
        console.error('Error in selectVideoCut:', error);
    }
}

function regenerateVideoCut(cutId) {
    try {
        const confirmed = confirm(`${cutId}Î•º Îã§Ïãú ÏÉùÏÑ±ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÎπÑÏö©: 5 ÌÜ†ÌÅ∞\nÏãúÍ∞Ñ: ÏïΩ 2-3Î∂Ñ`);
        
        if (confirmed) {
            showToast(`${cutId}Î•º Îã§Ïãú ÏÉùÏÑ±Ìï©ÎãàÎã§... (5 ÌÜ†ÌÅ∞ ÏÜåÎ™®)`, 'info');
            
            // Find the video element and show loading
            const cutContainer = document.querySelector(`[data-cut="${cutId}"]`).closest('.video-cut-container');
            const videoPreview = cutContainer.querySelector('.video-cut-preview');
            
            if (videoPreview) {
                // Create loading overlay
                const overlay = document.createElement('div');
                overlay.style.cssText = `
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: rgba(49, 130, 206, 0.9);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-weight: 600;
                    border-radius: 8px;
                    z-index: 10;
                `;
                overlay.innerHTML = `
                    <div style="text-align: center;">
                        <div style="font-size: 32px; margin-bottom: 12px;">üé¨</div>
                        <div>${cutId} Ïû¨ÏÉùÏÑ± Ï§ë...</div>
                        <div style="font-size: 12px; opacity: 0.8; margin-top: 8px;">Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî</div>
                    </div>
                `;
                
                videoPreview.style.position = 'relative';
                videoPreview.appendChild(overlay);
                
                // Simulate regeneration
                setTimeout(() => {
                    if (overlay && overlay.parentElement) {
                        overlay.parentElement.removeChild(overlay);
                    }
                    showToast(`${cutId}Í∞Ä ÏÉàÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§! üé¨`, 'success');
                    
                    // Auto-select the regenerated cut
                    selectVideoCut(cutId);
                }, 3000);
            }
        }
    } catch (error) {
        console.error('Error in regenerateVideoCut:', error);
        showToast('ÏòÅÏÉÅ Ïª∑ Ïû¨ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

function updateProceedButton() {
    try {
        const selectedCuts = document.querySelectorAll('[data-cut].selected, [data-cut].btn-selected');
        const proceedButton = document.getElementById('proceedWithCuts');
        
        console.log('Selected cuts:', selectedCuts.length); // Debug log
        
        if (proceedButton) {
            if (selectedCuts.length > 0) {
                proceedButton.disabled = false;
                proceedButton.classList.remove('btn-disabled');
                proceedButton.classList.add('btn-primary');
                proceedButton.textContent = `ÏÑ†ÌÉùÎêú ${selectedCuts.length}Í∞ú Ïª∑ÏúºÎ°ú ÏµúÏ¢Ö ÏòÅÏÉÅ Ï†úÏûë`;
            } else {
                proceedButton.disabled = true;
                proceedButton.classList.add('btn-disabled');
                proceedButton.classList.remove('btn-primary');
                proceedButton.textContent = 'ÏµúÏÜå 1Í∞ú Ïª∑ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî';
            }
        }
    } catch (error) {
        console.error('Error in updateProceedButton:', error);
    }
}

function proceedWithSelectedCuts() {
    try {
        // Get current cut configuration
        const cutConfiguration = getCurrentCutConfiguration();
        const { regenerationCount, totalCost } = updateCostCalculation();
        
        console.log('Cut configuration:', cutConfiguration);
        console.log('Regeneration count:', regenerationCount, 'Total cost:', totalCost);
        
        // Store configuration for use during processing
        window.currentCutConfiguration = cutConfiguration;
        
        // Show appropriate message based on configuration
        if (regenerationCount === 0) {
            showToast('Í∏∞Ï°¥ ÏòÅÏÉÅÏùÑ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©Ìï©ÎãàÎã§.', 'info');
            
            // Skip regeneration and go directly to results
            // Set completion flags to prevent navigation loop
            window.videoRegenerationCompleted = true;
            window.videoCompletionTime = Date.now();
            window.preventStep8Navigation = true;
            
            setTimeout(() => {
                if (app && app.stepManager) {
                    app.stepManager.goToStep(7);
                    showToast('ÏòÅÏÉÅ Ï†úÏûëÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üé¨', 'success');
                    
                    // Clear the navigation guard after a delay
                    setTimeout(() => {
                        window.preventStep8Navigation = false;
                    }, 5000);
                }
            }, 1000);
            
        } else if (regenerationCount === 3) {
            showToast(`Ï†ÑÏ≤¥ Ïª∑ÏùÑ ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§... (${totalCost} ÌÜ†ÌÅ∞ ÏÜåÎ™®)`, 'info');
            
            // Navigate to Step 6 for full regeneration
            setTimeout(() => {
                if (app && app.stepManager) {
                    app.stepManager.goToStep(6);
                    
                    // Set flag to trigger video regeneration progress
                    window.videoRegenerationInProgress = true;
                    
                    // Start the video regeneration progress
                    setTimeout(() => {
                        startVideoRegenerationProgress();
                    }, 500);
                }
            }, 1000);
            
        } else {
            showToast(`${regenerationCount}Í∞ú Ïª∑ÏùÑ ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§... (${totalCost} ÌÜ†ÌÅ∞ ÏÜåÎ™®)`, 'info');
            
            // Navigate to Step 6 for partial regeneration
            setTimeout(() => {
                if (app && app.stepManager) {
                    app.stepManager.goToStep(6);
                    
                    // Set flag to trigger partial video regeneration progress
                    window.videoRegenerationInProgress = true;
                    window.partialRegenerationInProgress = true;
                    
                    // Start the video regeneration progress
                    setTimeout(() => {
                        startPartialVideoRegenerationProgress();
                    }, 500);
                }
            }, 1000);
        }
        
    } catch (error) {
        console.error('Error in proceedWithSelectedCuts:', error);
        showToast('ÏòÅÏÉÅ Ï†úÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

function regenerateEntireVideo() {
    try {
        const confirmed = confirm('Ï†ÑÏ≤¥ ÏòÅÏÉÅÏùÑ Îã§Ïãú Ï†úÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÎπÑÏö©: 15 ÌÜ†ÌÅ∞\nÏãúÍ∞Ñ: ÏïΩ 5-8Î∂Ñ\n\nÎ™®Îì† Ïª∑Ïù¥ ÏÉàÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§.');
        
        if (confirmed) {
            showToast('Ï†ÑÏ≤¥ ÏòÅÏÉÅÏùÑ Îã§Ïãú Ï†úÏûëÌï©ÎãàÎã§... (15 ÌÜ†ÌÅ∞ ÏÜåÎ™®)', 'info');
            
            // Navigate to Step 6 to show progress bar for full regeneration
            setTimeout(() => {
                if (app && app.stepManager) {
                    app.stepManager.goToStep(6);
                    
                    // Set flag to trigger video regeneration progress
                    window.videoRegenerationInProgress = true;
                    
                    // Start the video regeneration progress
                    setTimeout(() => {
                        startVideoRegenerationProgress();
                    }, 500);
                }
            }, 1000);
        }
    } catch (error) {
        console.error('Error in regenerateEntireVideo:', error);
        showToast('Ï†ÑÏ≤¥ ÏòÅÏÉÅ Ïû¨ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

// ========================================
// Enhanced Video Cut Selection Functions
// ========================================

/**
 * Handle cut option change (keep vs regenerate)
 */
function handleCutOptionChange(cutId, option) {
    try {
        console.log(`Cut ${cutId} option changed to: ${option}`);
        
        // Update cut status display
        const statusElement = document.getElementById(`${cutId}Status`);
        const container = document.querySelector(`[data-cut="${cutId}"]`);
        
        if (statusElement && container) {
            if (option === 'keep') {
                statusElement.textContent = 'Í∏∞Ï°¥ Ïª∑ Ïú†ÏßÄ';
                statusElement.className = 'cut-status';
                container.className = 'video-cut-container keeping';
            } else {
                statusElement.textContent = 'ÏÉàÎ°ú ÏÉùÏÑ±';
                statusElement.className = 'cut-status regenerating';
                container.className = 'video-cut-container regenerating';
            }
        }
        
        // Update cost calculation
        updateCostCalculation();
        
        // Update proceed button text
        updateProceedButton();
        
    } catch (error) {
        console.error('Error in handleCutOptionChange:', error);
    }
}

/**
 * Update cost calculation based on selected options
 */
function updateCostCalculation() {
    try {
        const cuts = ['cut1', 'cut2', 'cut3'];
        let regenerationCount = 0;
        
        cuts.forEach(cutId => {
            const regenerateRadio = document.querySelector(`input[name="${cutId}Option"][value="regenerate"]`);
            if (regenerateRadio && regenerateRadio.checked) {
                regenerationCount++;
            }
        });
        
        const costPerCut = 5;
        const totalCost = regenerationCount * costPerCut;
        
        // Update UI
        const regenerationCountElement = document.getElementById('regenerationCount');
        const totalCostElement = document.getElementById('totalCost');
        
        if (regenerationCountElement) {
            regenerationCountElement.textContent = regenerationCount;
        }
        
        if (totalCostElement) {
            totalCostElement.textContent = totalCost;
        }
        
        return { regenerationCount, totalCost };
        
    } catch (error) {
        console.error('Error in updateCostCalculation:', error);
        return { regenerationCount: 0, totalCost: 0 };
    }
}

/**
 * Update proceed button text based on selections
 */
function updateProceedButton() {
    try {
        const { regenerationCount, totalCost } = updateCostCalculation();
        
        const proceedButtonText = document.getElementById('proceedButtonText');
        const proceedButtonCost = document.getElementById('proceedButtonCost');
        
        if (proceedButtonText && proceedButtonCost) {
            if (regenerationCount === 0) {
                proceedButtonText.textContent = 'Í∏∞Ï°¥ ÏòÅÏÉÅ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©';
                proceedButtonCost.textContent = '(Î¨¥Î£å)';
            } else if (regenerationCount === 3) {
                proceedButtonText.textContent = 'Ï†ÑÏ≤¥ Ïª∑ ÏÉàÎ°ú ÏÉùÏÑ±';
                proceedButtonCost.textContent = `(${totalCost} ÌÜ†ÌÅ∞)`;
            } else {
                proceedButtonText.textContent = `${regenerationCount}Í∞ú Ïª∑ ÏÉàÎ°ú ÏÉùÏÑ±`;
                proceedButtonCost.textContent = `(${totalCost} ÌÜ†ÌÅ∞)`;
            }
        }
        
    } catch (error) {
        console.error('Error in updateProceedButton:', error);
    }
}

/**
 * Initialize enhanced video cut selection
 */
function initializeEnhancedVideoCuts() {
    try {
        // Initialize all cuts to "keep" state
        const cuts = ['cut1', 'cut2', 'cut3'];
        
        cuts.forEach(cutId => {
            const keepRadio = document.querySelector(`input[name="${cutId}Option"][value="keep"]`);
            if (keepRadio) {
                keepRadio.checked = true;
                handleCutOptionChange(cutId, 'keep');
            }
        });
        
        // Initialize video loading and error handling
        initializeVideoElements();
        
        // Initialize cost calculation
        updateCostCalculation();
        updateProceedButton();
        
        console.log('Enhanced video cut selection initialized');
        
    } catch (error) {
        console.error('Error in initializeEnhancedVideoCuts:', error);
    }
}

/**
 * Initialize video elements with loading and error handling
 */
function initializeVideoElements() {
    try {
        const videos = document.querySelectorAll('.cut-video');
        
        videos.forEach((video, index) => {
            const cutId = `cut${index + 1}`;
            const container = video.closest('.video-cut-container');
            
            console.log(`Initializing video for ${cutId}`, video);
            
            // Add loading indicator
            showVideoLoadingState(container);
            
            // Handle successful video load
            video.addEventListener('loadedmetadata', () => {
                console.log(`Video ${cutId} metadata loaded successfully`);
                hideVideoLoadingState(container);
                container.classList.add('video-loaded');
                
                // Try to play the video
                video.play().catch(error => {
                    console.warn(`Video ${cutId} autoplay failed:`, error);
                    // Autoplay failed, but video is loaded
                });
            });
            
            // Handle video load errors
            video.addEventListener('error', (e) => {
                console.error(`Video ${cutId} loading error:`, e);
                showVideoErrorState(container, cutId);
            });
            
            // Handle video loading start
            video.addEventListener('loadstart', () => {
                console.log(`Video ${cutId} loading started`);
                showVideoLoadingState(container);
            });
            
            // Handle video ready to play
            video.addEventListener('canplay', () => {
                console.log(`Video ${cutId} ready to play`);
                hideVideoLoadingState(container);
                container.classList.add('video-loaded');
            });
            
            // Force video to load
            video.load();
        });
        
        console.log('Video elements initialized');
        
    } catch (error) {
        console.error('Error in initializeVideoElements:', error);
    }
}

/**
 * Show video loading state
 */
function showVideoLoadingState(container) {
    try {
        const preview = container.querySelector('.video-cut-preview');
        if (preview && !preview.querySelector('.video-loading-overlay')) {
            const loadingOverlay = document.createElement('div');
            loadingOverlay.className = 'video-loading-overlay';
            loadingOverlay.innerHTML = `
                <div class="loading-content">
                    <div class="loading-spinner"></div>
                    <p>ÎπÑÎîîÏò§ Î°úÎî© Ï§ë...</p>
                </div>
            `;
            preview.appendChild(loadingOverlay);
            container.classList.add('video-loading');
        }
    } catch (error) {
        console.error('Error in showVideoLoadingState:', error);
    }
}

/**
 * Hide video loading state
 */
function hideVideoLoadingState(container) {
    try {
        const loadingOverlay = container.querySelector('.video-loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.remove();
        }
        container.classList.remove('video-loading');
    } catch (error) {
        console.error('Error in hideVideoLoadingState:', error);
    }
}

/**
 * Show video error state
 */
function showVideoErrorState(container, cutId) {
    try {
        const preview = container.querySelector('.video-cut-preview');
        const video = preview.querySelector('.cut-video');
        
        // Hide the video element
        video.style.display = 'none';
        
        // Remove loading overlay
        hideVideoLoadingState(container);
        
        // Show error message
        if (!preview.querySelector('.video-error-overlay')) {
            const errorOverlay = document.createElement('div');
            errorOverlay.className = 'video-error-overlay';
            errorOverlay.innerHTML = `
                <div class="error-content">
                    <i class="error-icon">‚ö†Ô∏è</i>
                    <p>ÎπÑÎîîÏò§Î•º Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§</p>
                    <button class="btn btn-outline" onclick="retryVideoLoad('${cutId}')">Îã§Ïãú ÏãúÎèÑ</button>
                </div>
            `;
            preview.appendChild(errorOverlay);
        }
        
        container.classList.add('video-error');
        
    } catch (error) {
        console.error('Error in showVideoErrorState:', error);
    }
}

/**
 * Retry video loading
 */
function retryVideoLoad(cutId) {
    try {
        const container = document.querySelector(`[data-cut="${cutId}"]`);
        const video = container.querySelector('.cut-video');
        const errorOverlay = container.querySelector('.video-error-overlay');
        
        if (errorOverlay) {
            errorOverlay.remove();
        }
        
        video.style.display = 'block';
        container.classList.remove('video-error');
        video.load();
        
    } catch (error) {
        console.error('Error in retryVideoLoad:', error);
    }
}

/**
 * Set all cuts to regenerate
 */
function regenerateAllCuts() {
    try {
        const confirmed = confirm('Î™®Îì† Ïª∑ÏùÑ Îã§Ïãú Ï†úÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÎπÑÏö©: 15 ÌÜ†ÌÅ∞\nÏãúÍ∞Ñ: ÏïΩ 5-8Î∂Ñ');
        
        if (confirmed) {
            const cuts = ['cut1', 'cut2', 'cut3'];
            
            cuts.forEach(cutId => {
                const regenerateRadio = document.querySelector(`input[name="${cutId}Option"][value="regenerate"]`);
                if (regenerateRadio) {
                    regenerateRadio.checked = true;
                    handleCutOptionChange(cutId, 'regenerate');
                }
            });
            
            showToast('Î™®Îì† Ïª∑Ïù¥ Ïû¨ÏÉùÏÑ±ÏúºÎ°ú ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.', 'success');
        }
        
    } catch (error) {
        console.error('Error in regenerateAllCuts:', error);
        showToast('ÏÑ§Ï†ï Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

/**
 * Get current cut selection configuration
 */
function getCurrentCutConfiguration() {
    try {
        const cuts = ['cut1', 'cut2', 'cut3'];
        const configuration = {};
        
        cuts.forEach(cutId => {
            const keepRadio = document.querySelector(`input[name="${cutId}Option"][value="keep"]`);
            const regenerateRadio = document.querySelector(`input[name="${cutId}Option"][value="regenerate"]`);
            
            if (keepRadio && keepRadio.checked) {
                configuration[cutId] = 'keep';
            } else if (regenerateRadio && regenerateRadio.checked) {
                configuration[cutId] = 'regenerate';
            } else {
                configuration[cutId] = 'keep'; // Default to keep
            }
        });
        
        return configuration;
        
    } catch (error) {
        console.error('Error in getCurrentCutConfiguration:', error);
        return { cut1: 'keep', cut2: 'keep', cut3: 'keep' };
    }
}

/**
 * Start partial video regeneration progress for mixed scenarios
 */
function startPartialVideoRegenerationProgress() {
    try {
        if (app && app.stepManager) {
            app.stepManager.startPartialVideoRegenerationProgress();
        }
    } catch (error) {
        console.error('Error in startPartialVideoRegenerationProgress:', error);
        showToast('Î∂ÄÎ∂Ñ ÏòÅÏÉÅ Ïû¨ÏÉùÏÑ± ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

// ========================================
// Enhanced Image Selection Functions
// ========================================

/**
 * Toggle between new image selection and keep original cut
 */
function toggleCutMode(cutId, mode) {
    try {
        console.log(`Cut ${cutId} mode changed to: ${mode}`);
        
        const selectionArea = document.getElementById(`${cutId}Selection`);
        const originalInfo = document.getElementById(`${cutId}OriginalInfo`);
        
        if (mode === 'keep') {
            // Hide image selection area and show original cut info
            if (selectionArea) {
                selectionArea.style.display = 'none';
            }
            if (originalInfo) {
                originalInfo.style.display = 'block';
            }
            
            // Mark this cut as using original
            if (app && app.dataService) {
                app.dataService.updateImageSelection(cutId, 'original');
            }
            
        } else {
            // Show image selection area and hide original cut info
            if (selectionArea) {
                selectionArea.style.display = 'block';
            }
            if (originalInfo) {
                originalInfo.style.display = 'none';
            }
            
            // Clear original selection
            if (app && app.dataService) {
                app.dataService.updateImageSelection(cutId, null);
            }
        }
        
        // Update proceed button state
        updateImageSelectionButton();
        
    } catch (error) {
        console.error('Error in toggleCutMode:', error);
        showToast('Ïª∑ Î™®Îìú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
    }
}

/**
 * Update the proceed button state based on image selections
 */
function updateImageSelectionButton() {
    try {
        const proceedButton = document.getElementById('step6ImageNext');
        if (!proceedButton) return;
        
        const cuts = ['cut1', 'cut2', 'cut3'];
        let allCutsReady = true;
        
        for (const cutId of cuts) {
            const keepRadio = document.querySelector(`input[name="${cutId}Mode"][value="keep"]`);
            const newRadio = document.querySelector(`input[name="${cutId}Mode"][value="new"]`);
            
            if (keepRadio && keepRadio.checked) {
                // This cut is keeping original, so it's ready
                continue;
            } else if (newRadio && newRadio.checked) {
                // This cut needs new image selection
                const data = app ? app.dataService.getData() : null;
                if (!data || !data.selectedImages || !data.selectedImages[cutId]) {
                    allCutsReady = false;
                    break;
                }
            }
        }
        
        proceedButton.disabled = !allCutsReady;
        
        // Update button text based on selections
        const keepCount = cuts.filter(cutId => {
            const keepRadio = document.querySelector(`input[name="${cutId}Mode"][value="keep"]`);
            return keepRadio && keepRadio.checked;
        }).length;
        
        const newCount = 3 - keepCount;
        
        if (keepCount === 0) {
            proceedButton.textContent = 'ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄÎ°ú ÏòÅÏÉÅ Ïª∑ ÏÉùÏÑ±';
        } else if (newCount === 0) {
            proceedButton.textContent = 'ÏõêÎ≥∏ ÏòÅÏÉÅ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©';
        } else {
            proceedButton.textContent = `${newCount}Í∞ú Ïª∑ ÏÉàÎ°ú ÏÉùÏÑ± (${keepCount}Í∞ú ÏõêÎ≥∏ Ïú†ÏßÄ)`;
        }
        
    } catch (error) {
        console.error('Error in updateImageSelectionButton:', error);
    }
}

/**
 * Get current image selection configuration
 */
function getImageSelectionConfiguration() {
    try {
        const cuts = ['cut1', 'cut2', 'cut3'];
        const configuration = {};
        
        cuts.forEach(cutId => {
            const keepRadio = document.querySelector(`input[name="${cutId}Mode"][value="keep"]`);
            const newRadio = document.querySelector(`input[name="${cutId}Mode"][value="new"]`);
            
            if (keepRadio && keepRadio.checked) {
                configuration[cutId] = 'keep';
            } else if (newRadio && newRadio.checked) {
                configuration[cutId] = 'new';
            } else {
                configuration[cutId] = 'new'; // Default to new
            }
        });
        
        return configuration;
        
    } catch (error) {
        console.error('Error in getImageSelectionConfiguration:', error);
        return { cut1: 'new', cut2: 'new', cut3: 'new' };
    }
}

/**
 * Initialize enhanced image selection
 */
function initializeEnhancedImageSelection() {
    try {
        // Initialize all cuts to "new" mode
        const cuts = ['cut1', 'cut2', 'cut3'];
        
        cuts.forEach(cutId => {
            const newRadio = document.querySelector(`input[name="${cutId}Mode"][value="new"]`);
            if (newRadio) {
                newRadio.checked = true;
                toggleCutMode(cutId, 'new');
            }
        });
        
        // Initialize button state
        updateImageSelectionButton();
        
        console.log('Enhanced image selection initialized');
        
    } catch (error) {
        console.error('Error in initializeEnhancedImageSelection:', error);
    }
}

// ========================================
// Application Entry Point
// ========================================

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}